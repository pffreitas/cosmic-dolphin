name: Go Microservice CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  PG_CONN: user=postgres password=postgres host=127.0.0.1 port=5432 dbname=postgres
  DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/postgres?sslmode=disable
  JWT_SECRET: super-secret-jwt-token-with-at-least-32-characters-long
  DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
  APP_ID: ${{ secrets.DIGITALOCEAN_APP_ID }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: supabase/postgres:15.1.0.117
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install gotestsum
      run: go install gotest.tools/gotestsum@latest

    - name: Install pgvector dependencies
      run: |
        docker exec ${{ job.services.postgres.id }} bash -c \
        "apt-get update && \
        apt-get install -y postgresql-common && \
        yes '' | /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh && \
        apt-get update && \
        apt-get install -y postgresql-server-dev-15 build-essential git gcc make && \
        git clone https://github.com/pgvector/pgvector.git && \
        cd pgvector && \
        make && \
        make install" || echo "Installation failed with exit code $?"

    - name: Enable pgvector extension
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c 'CREATE EXTENSION IF NOT EXISTS vector;' || exit 1

    - name: Install DB Migration tool
      run: |
        make db-migrate-install
        which river || echo "River installation failed"
        which migrate || echo "River installation failed"

    - name: Install dependencies
      run: go mod download

    - name: Run Database Migrations
      run: make db-migrate

    - name: Run tests with coverage
      run: |
        mkdir -p test-results
        gotestsum --format pkgname \
          --junitfile test-results/unit-tests.xml \
          --jsonfile test-results/unit-tests.json \
          -- -coverprofile=coverage.out ./...

    - name: Generate coverage report
      run: |
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          test-results/
          coverage.html

    - name: Report test coverage
      run: |
        total_coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
        echo "Total test coverage: $total_coverage"


  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build
      run: go build -v ./...

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'      

    - name: Install DB Migration tool
      run: |
        make db-migrate-install
        which river || echo "River installation failed"
        which migrate || echo "River installation failed"

    - name: Install dependencies
      run: go mod download

    - name: Run Database Migrations
      env:
        DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
      run: make db-migrate

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Trigger App Platform Deployment
      run: |
        doctl apps create-deployment ${{ secrets.DIGITALOCEAN_APP_ID }} --force-rebuild --wait